# .github/workflows/ci.yml

name: Core CI

on:
  push:
    branches: [ "main", "master", "develop" ] # Ветки, при пуше в которые запускается CI
  pull_request:
    branches: [ "main", "master", "develop" ] # А также при создании Pull Request в эти ветки

jobs:
  # --- 1. Быстрые проверки: Линтинг и Форматирование ---
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install ruff

      - name: Run Ruff Linter
        run: ruff check .

      - name: Run Ruff Formatter Check
        run: ruff format --check .

  # --- 2. Проверка типов ---
  type-check:
    name: Type Checking (mypy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        # Устанавливаем зависимости из ОБОИХ сервисов + mypy
        run: |
          pip install mypy
          pip install -r apps/auth_svc/requirements.txt
          pip install -r apps/gateway/requirements.txt

      - name: Run mypy
        # Проверяем только наш код в libs и apps
        run: mypy libs apps
  check-contracts:
    name: Check API Contracts
    runs-on: ubuntu-latest
    needs: [ lint, type-check ] # Запускаем после базовых проверок
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r apps/auth_svc/requirements.txt
          pip install -r apps/gateway/requirements.txt

      - name: Generate schemas from models
        run: python scripts/generate_schemas.py

      - name: Check for schema differences
        run: |
          # Эта команда упадет, если сгенерированные схемы отличаются от тех, что в репозитории
          git diff --exit-code --quiet libs/domain/schemas/
          echo "✅ API contract schemas are up-to-date."

  # --- 3. Сборка Docker-образов ---
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [check-contracts]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build gateway image
        run: docker build -t gateway-ci -f apps/gateway/Dockerfile .

      - name: Build auth_svc image
        run: docker build -t auth_svc-ci -f apps/auth_svc/Dockerfile .

  # --- 4. Главный этап: Интеграционные и Smoke-тесты ---
  test:
    name: Integration & Smoke Tests
    runs-on: ubuntu-latest
    needs: build # Запускается только после успешной сборки
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for tests
        run: |
          cp .env.sample .env
          echo "LOG_FORMATTER=json" >> .env

      # ДОБАВЛЕНО: Этот шаг установит Docker Compose на сервер
      - name: Show Docker versions
        run: |
          docker --version
          docker compose version

      - name: Start services
        run: docker compose -f docker-compose.yml up -d --build

      - name: Wait for services to be healthy
        shell: bash
        run: |
          echo "Waiting for services..."
          for i in {1..20}; do
            if curl -sf http://localhost:8000/health/ready && curl -sf http://localhost:8001/health/ready; then
              echo "All services are healthy!"
              exit 0
            fi
            echo "Services not ready yet, waiting... ($i/20)"
            sleep 5
          done
          echo "Healthcheck timeout"; exit 1

      - name: Run Pytest
        run: docker compose exec -T gateway pytest -q tests/

      - name: Show logs on failure
        if: failure()
        run: |
          echo "--- Gateway Logs ---"
          docker compose logs --tail=500 gateway
          echo "--- Auth Service Logs ---"
          docker compose logs --tail=500 auth_svc
          echo "--- Postgres Logs ---"
          docker compose logs --tail=200 postgres
          echo "--- RabbitMQ Logs ---"
          docker compose logs --tail=200 rabbitmq

      - name: Stop services
        if: always()
        run: docker compose down -v
