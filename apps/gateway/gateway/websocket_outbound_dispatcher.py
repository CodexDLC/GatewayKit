from __future__ import annotations

import json
from typing import Optional, Dict, Any
from libs.utils.logging_setup import app_logger as logger

from libs.messaging.i_message_bus import IMessageBus
from libs.messaging.rabbitmq_names import Queues
from apps.gateway.gateway.client_connection_manager import ClientConnectionManager

# –ù–æ–≤—ã–µ DTO
from libs.domain.dto.backend import BackendOutboundEnvelope
from libs.domain.dto.ws import WSEventFrame, WSErrorFrame
from libs.domain.dto.errors import ErrorDTO


class OutboundWebSocketDispatcher:
    """
    –ö–æ–Ω—Å—å—é–º–µ—Ä –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–µ–∫—ç–Ω–¥–æ–≤ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏—Ö –≤ WebSocket.
    –ñ–¥—ë–º –Ω–æ–≤—ã–π envelope: BackendOutboundEnvelope.
    """
    def __init__(
        self,
        message_bus: IMessageBus,
        client_connection_manager: ClientConnectionManager
    ):
        self.message_bus = message_bus
        self.client_connection_manager = client_connection_manager
        self._listen_task: Optional[asyncio.Task] = None
        self.outbound_queue_name = Queues.GATEWAY_OUTBOUND_WS_MESSAGES
        logger.info("‚úÖ OutboundWebSocketDispatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def start_listening_for_outbound_messages(self):
        """
        –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –∫–ª–∏–µ–Ω—Ç–∞–º.
        """
        logger.info(f"üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—á–µ—Ä–µ–¥—å: {self.outbound_queue_name}")
        await self.message_bus.consume(
            queue_name=self.outbound_queue_name,
            handler=self._handle_outbound_message,
            prefetch=64,
        )

    async def _handle_outbound_message(self, body: Dict[str, Any], meta: Dict[str, Any]) -> None:
        """
        body: dict (JSON), meta: {message_id, correlation_id, routing_key, ...}
        –§–æ—Ä–º–∞—Ç body —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç BackendOutboundEnvelope.
        """
        try:
            env = BackendOutboundEnvelope.model_validate(body)
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π outbound envelope: {e} | body={body!r}")
            # –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ -> —Å–æ–æ–±—â–µ–Ω–∏–µ —É–π–¥—ë—Ç –≤ DLQ/–æ—Ç–∫–ª–æ–Ω–∏—Ç—Å—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ bus)
            raise

        # --- –ö–æ–º—É –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å ---
        targets: list[str] = []
        if env.recipient:
            # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if env.recipient.connection_id:
                targets.append(env.recipient.connection_id)
            elif env.recipient.account_id:
                targets.append(env.recipient.account_id)

        # TODO: –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ (delivery.mode == "group")

        if not targets:
            logger.info(f"‚ö†Ô∏è –ù–µ—Ç –∞–¥—Ä–µ—Å–∞—Ç–∞ –≤ envelope (recipient/delivery –ø—É—Å—Ç—ã–µ). –ü—Ä–æ–ø—É—Å–∫–∞—é. request_id={env.request_id}")
            return

        # --- –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞–¥—Ä –æ—Ç–≤–µ—Ç–∞ ---
        if env.status == "error":
            err = env.error or ErrorDTO(code="common.UNKNOWN", message="Unhandled backend error")
            frame = WSErrorFrame(error=err, request_id=env.request_id)
            payload_json = frame.model_dump_json()
        else:
            server_status = "final" if env.final else ("update" if env.status == "update" else "ok")
            frame = WSEventFrame(
                event=env.event,
                status=server_status,
                payload=env.payload or {},
                request_id=env.request_id,
                tick=env.tick,
                state_version=env.state_version,
            )
            payload_json = frame.model_dump_json()

        # --- –î–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ–º —Ç–∞—Ä–≥–µ—Ç–∞–º ---
        delivered = 0
        for target_id in targets:
            ok = await self.client_connection_manager.send_message_to_client(target_id, payload_json)
            if not ok:
                logger.debug(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ WS –¥–ª—è '{target_id}' (corr={meta.get('correlation_id')})")
            else:
                delivered += 1

        if delivered == 0:
            logger.warning(
                f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å outbound-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥—Ä–µ—Å–∞—Ç—É: {targets} "
                f"(corr={meta.get('correlation_id')}, event={env.event})"
            )
        else:
            logger.debug(
                f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {delivered}/{len(targets)} –∞–¥—Ä–µ—Å–∞—Ç–∞–º "
                f"(corr={meta.get('correlation_id')}, event={env.event})"
            )
