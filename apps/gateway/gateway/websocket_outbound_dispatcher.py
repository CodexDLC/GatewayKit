from __future__ import annotations

import asyncio
import json
from typing import Optional, Dict, Any

# –ª–æ–≥–≥–µ—Ä
try:
    from utils.logging_setup import app_logger as logger
except Exception:  # fallback
    import logging
    logger = logging.getLogger(__name__)

from libs.messaging.i_message_bus import IMessageBus
from libs.messaging.rabbitmq_names import Queues
from apps.gateway.gateway.client_connection_manager import ClientConnectionManager


class OutboundWebSocketDispatcher:
    """
    –ü–æ—Ç—Ä–µ–±–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –µ–¥–∏–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö
    –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.

    JSON-only, –±–µ–∑ msgpack –∏ –±–µ–∑ –ø—Ä—è–º–æ–≥–æ aio_pika.IncomingMessage.
    Ack/Nack –¥–µ–ª–∞–µ—Ç IMessageBus.
    """

    def __init__(self, message_bus: IMessageBus, client_connection_manager: ClientConnectionManager) -> None:
        self.message_bus = message_bus
        self.client_connection_manager = client_connection_manager
        self._listen_task: Optional[asyncio.Task] = None
        self.outbound_queue_name = Queues.GATEWAY_OUTBOUND_WS_MESSAGES
        logger.info("‚úÖ OutboundWebSocketDispatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def start_listening_for_outbound_messages(self) -> None:
        if self._listen_task is None or self._listen_task.done():
            logger.info(f"üéß –°–ª—É—à–∞—é –∏—Å—Ö–æ–¥—è—â–∏–µ WS-—Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{self.outbound_queue_name}'.")
            self._listen_task = asyncio.create_task(self._listen_loop())
        else:
            logger.warning("OutboundWebSocketDispatcher —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

    async def _listen_loop(self) -> None:
        try:
            await self.message_bus.consume(self.outbound_queue_name, self._on_message_received)
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ OutboundWebSocketDispatcher: {e}", exc_info=True)
            raise

    async def _on_message_received(self, data: Dict[str, Any], meta: Dict[str, Any]) -> None:
        """
        –ö–æ–ª–±—ç–∫ —à–∏–Ω—ã. data ‚Äî —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON (dict), meta ‚Äî –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (routing_key, correlation_id, ...).

        –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ –∏–∑ –¥–≤—É—Ö:
          1) –ü–ª–æ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: { "client_id": "...", ... }
          2) –û–±—ë—Ä—Ç–∫–∞: { "payload": { "client_id": "...", ... }, ... }
        """
        try:
            # –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ WS-—Å–æ–æ–±—â–µ–Ω–∏–µ
            payload = data.get("payload") if isinstance(data, dict) else None
            ws_msg = payload if isinstance(payload, dict) and "client_id" in payload else data

            if not isinstance(ws_msg, dict):
                logger.warning("OutboundDispatcher: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ dict ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                return

            target_client_id = ws_msg.get("client_id")
            if not target_client_id:
                corr = meta.get("correlation_id")
                logger.warning(f"OutboundDispatcher: –Ω–µ—Ç client_id (corr={corr}) ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                return

            message_json = json.dumps(ws_msg, ensure_ascii=False, separators=(",", ":"))
            ok = await self.client_connection_manager.send_message_to_client(target_client_id, message_json)

            corr = meta.get("correlation_id")
            if ok:
                logger.debug(f"–û—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {target_client_id} (corr={corr}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {target_client_id} (corr={corr}) ‚Äî –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")

        except Exception as e:
            corr = meta.get("correlation_id")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ WS-—Å–æ–æ–±—â–µ–Ω–∏—è (corr={corr}): {e}", exc_info=True)
