# apps/gateway/gateway/event_broadcast_handler.py
from __future__ import annotations

import asyncio
import json
import uuid
from typing import Optional, Dict, Any

from libs.messaging.rabbitmq_names import Queues
from libs.messaging.i_message_bus import IMessageBus
from apps.gateway.gateway.client_connection_manager import ClientConnectionManager
from libs.utils.logging_setup import app_logger as logger


class EventBroadcastHandler:
    """
    –°–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –∏—Ö –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º WebSocket-–∫–ª–∏–µ–Ω—Ç–∞–º.
    JSON-only. –ë–µ–∑ msgpack. –ë–µ–∑ –ø—Ä—è–º–æ–π —Ä–∞–±–æ—Ç—ã —Å AMQP-—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
    """

    def __init__(self, message_bus: IMessageBus, client_connection_manager: ClientConnectionManager) -> None:
        self.message_bus = message_bus
        self.client_connection_manager = client_connection_manager
        self._listen_task: Optional[asyncio.Task] = None
        self.inbound_queue_name = Queues.GATEWAY_INBOUND_EVENTS
        logger.info("‚úÖ EventBroadcastHandler (broadcast-to-all) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def start_listening_for_events(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π."""
        if self._listen_task is None or self._listen_task.done():
            logger.info(f"üéß –°–ª—É—à–∞—é —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{self.inbound_queue_name}' –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
            self._listen_task = asyncio.create_task(self._listen_loop())
        else:
            logger.warning("EventBroadcastHandler —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

    async def _listen_loop(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–ª–±—ç–∫ –≤ —à–∏–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            await self.message_bus.consume(self.inbound_queue_name, self._on_message_received)
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ EventBroadcastHandler: {e}", exc_info=True)
            raise

    async def _on_message_received(self, data: Dict[str, Any], meta: Dict[str, Any]) -> None:
        """
        –ö–æ–ª–ª–±—ç–∫ —à–∏–Ω—ã. data ‚Äî —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON, meta ‚Äî –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (routing_key, correlation_id, ...).
        """
        try:
            routing_key = meta.get("routing_key") or "event.unknown"
            logger.info(f"EventBroadcastHandler: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ '{routing_key}'")
            logger.debug(f"payload: {data}")

            # —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
            all_client_ids = list(self.client_connection_manager.active_connections.keys())
            if not all_client_ids:
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç –ø–æ–¥ WebSocket (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –º–æ–¥–µ–ª–µ–π)
            envelope = {
                "type": "EVENT",
                "correlation_id": meta.get("correlation_id") or str(uuid.uuid4()),
                "payload": {
                    "type": routing_key,
                    "payload": data,
                },
            }
            message_json = json.dumps(envelope, ensure_ascii=False, separators=(",", ":"))

            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–±—ã—Ç–∏—è '{routing_key}' {len(all_client_ids)} –∫–ª–∏–µ–Ω—Ç–∞–º.")
            for client_id in all_client_ids:
                await self.client_connection_manager.send_message_to_client(client_id, message_json)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)

    @property
    def listen_task(self):
        return self._listen_task
