# apps/gateway/gateway_main.py
import asyncio
import time
from fastapi import status

from starlette.middleware.cors import CORSMiddleware

from libs.app.bootstrap import create_service_app
from libs.app.security_middleware import SecurityHeadersMiddleware
from libs.messaging.rabbitmq_topology import declare_gateway_topology
from apps.gateway.rest.routers_config import ROUTERS_CONFIG
from libs.containers.gateway_container import GatewayContainer
from apps.gateway.listeners import create_event_broadcast_listener_factory
from apps.gateway.config.setting_gateway import GatewaySettings
from libs.utils.logging_setup import app_logger as logger


# --- –®–ê–ì 2.1: –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–°–¢–û–†–û–ñ ---
async def idle_connection_checker(
    settings: GatewaySettings, container: GatewayContainer
):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ WS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
    manager = container.client_connection_manager
    logger.info("üöÄ –§–æ–Ω–æ–≤—ã–π —Å—Ç–æ—Ä–æ–∂ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö WS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç–æ–π –∂–µ —á–∞—Å—Ç–æ—Ç–æ–π, —á—Ç–æ –∏ —à–ª—ë–º –ø–∏–Ω–≥–∏
        await asyncio.sleep(settings.GATEWAY_WS_PING_INTERVAL)

        now = time.monotonic()
        idle_timeout = settings.GATEWAY_WS_IDLE_TIMEOUT
        closed_count = 0

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–∞—Ä—å –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        client_ids = list(manager.active_connections.keys())

        for client_id in client_ids:
            connection_data = manager.active_connections.get(client_id)
            if not connection_data:
                continue

            websocket, last_activity = connection_data
            if now - last_activity > idle_timeout:
                logger.warning(f"üîå WS idle timeout: –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {client_id}")
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    await websocket.close(
                        code=status.WS_1008_POLICY_VIOLATION, reason="Idle timeout"
                    )
                except Exception:
                    # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω–æ —É–∂–µ –æ–±–æ—Ä–≤–∞–ª–æ—Å—å), –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    pass
                finally:
                    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —É–¥–∞–ª—è–µ–º –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    manager.disconnect(client_id)
                    closed_count += 1

        if closed_count > 0:
            logger.info(f"–°—Ç–æ—Ä–æ–∂ –∑–∞–∫—Ä—ã–ª {closed_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö WS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.")


event_listener_factory = create_event_broadcast_listener_factory()

app = create_service_app(
    service_name="gateway",
    container_factory=GatewayContainer.create,
    settings_class=GatewaySettings,
    topology_declarator=declare_gateway_topology,
    listener_factories=[event_listener_factory],
    include_rest_routers=ROUTERS_CONFIG,
    # --- –®–ê–ì 2.2: –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –ù–ê–®–£ –§–û–ù–û–í–£–Æ –ó–ê–î–ê–ß–£ ---
    background_tasks=[idle_connection_checker],
)

app.add_middleware(SecurityHeadersMiddleware)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í dev –æ—Å—Ç–∞–≤–ª—è–µ–º "*", –¥–ª—è prod –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
