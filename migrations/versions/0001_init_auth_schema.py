"""init_auth_schema

Revision ID: 0001
Revises:
Create Date: 2025-08-19 23:00:00.000000

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "0001"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = ("auth",)
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS auth")
    op.execute("CREATE EXTENSION IF NOT EXISTS citext")

    op.create_table(
        "accounts",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("username", sa.String(length=50), nullable=False),
        sa.Column("email", postgresql.CITEXT(), nullable=True),
        sa.Column("avatar", sa.Text(), nullable=True),
        sa.Column("locale", sa.String(length=10), nullable=True),
        sa.Column("region", sa.String(length=20), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE", "BANNED", "DELETED", name="account_status_enum", schema="auth"
            ),
            nullable=False,
        ),
        sa.Column(
            "role",
            sa.Enum("USER", "ADMIN", name="account_role_enum", schema="auth"),
            nullable=False,
        ),
        sa.Column("twofa_enabled", sa.Boolean(), nullable=False),
        sa.Column(
            "linked_platforms",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_accounts")),
        sa.UniqueConstraint("email", name=op.f("uq_accounts_email")),
        sa.UniqueConstraint("username", name=op.f("uq_accounts_username")),
        schema="auth",
    )
    op.create_table(
        "credentials",
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("password_hash", sa.Text(), nullable=False),
        sa.Column("password_updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("twofa_secret", sa.Text(), nullable=True),
        sa.Column("last_login_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("failed_attempts", sa.Integer(), nullable=False),
        sa.Column("locked_until", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["auth.accounts.id"],
            name=op.f("fk_credentials_account_id_accounts"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("account_id", name=op.f("pk_credentials")),
        schema="auth",
    )
    op.create_table(
        "refresh_tokens",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("jti", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("token_hash", sa.Text(), nullable=False),
        sa.Column("user_agent", sa.Text(), nullable=True),
        sa.Column("ip", postgresql.INET(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("revoked_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["auth.accounts.id"],
            name=op.f("fk_refresh_tokens_account_id_accounts"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_refresh_tokens")),
        sa.UniqueConstraint("jti", name=op.f("uq_refresh_tokens_jti")),
        schema="auth",
    )
    op.create_index(
        op.f("ix_refresh_tokens_account_id"),
        "refresh_tokens",
        ["account_id"],
        unique=False,
        schema="auth",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_refresh_tokens_account_id"), table_name="refresh_tokens", schema="auth"
    )
    op.drop_table("refresh_tokens", schema="auth")
    op.drop_table("credentials", schema="auth")
    op.drop_table("accounts", schema="auth")
    op.execute("DROP EXTENSION IF EXISTS citext")
    op.execute("DROP SCHEMA IF EXISTS auth CASCADE")
    # ### end Alembic commands ###
