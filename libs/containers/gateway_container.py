# libs/containers/gateway_container.py
from __future__ import annotations
import os
from dataclasses import dataclass
from libs.messaging.i_message_bus import IMessageBus
from libs.messaging.rabbitmq_message_bus import RabbitMQMessageBus


@dataclass
class GatewayContainer:
    """
    DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Gateway.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: —à–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    message_bus: IMessageBus

    @classmethod
    async def create(cls) -> "GatewayContainer":
        """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."""
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é RABBITMQ_DSN –∏–∑ docker-compose
        amqp_url = os.getenv("RABBITMQ_DSN", "amqp://guest:guest@rabbitmq:5672/")

        bus = RabbitMQMessageBus(amqp_url)
        await bus.connect()

        return cls(message_bus=bus)

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        if self.message_bus:
            await self.message_bus.close()