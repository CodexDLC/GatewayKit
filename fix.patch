$patch = @'
diff --git a/libs/utils/transactional_decorator.py b/libs/utils/transactional_decorator.py
--- a/libs/utils/transactional_decorator.py
+++ b/libs/utils/transactional_decorator.py
@@ -1,9 +1,9 @@
 import functools
 import logging
-from typing import Callable, Any, Coroutine, TypeVar, ParamSpec, Optional, cast
+from typing import Callable, Any, Coroutine, TypeVar, ParamSpec, Optional, cast, Concatenate
 from sqlalchemy.ext.asyncio import AsyncSession

 P = ParamSpec("P")
 R = TypeVar("R")
@@
-def transactional(session_factory: Callable[[], AsyncSession]):
+def transactional(session_factory: Callable[[], AsyncSession]) -> Callable[
+    [Callable[Concatenate[AsyncSession, P], Coroutine[Any, Any, R]]],
+    Callable[P, Coroutine[Any, Any, R]]
+]:
@@
-    def decorator(
-        func: Callable[P, Coroutine[Any, Any, R]],
-    ) -> Callable[P, Coroutine[Any, Any, R]]:
+    def decorator(
+        func: Callable[Concatenate[AsyncSession, P], Coroutine[Any, Any, R]],
+    ) -> Callable[P, Coroutine[Any, Any, R]]:
         @functools.wraps(func)
         async def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:
             session: Optional[AsyncSession] = None
             try:
                 async with session_factory() as session:
                     logger.debug(f"Транзакция открыта для метода {func.__name__}")
-                    result = await func(cast(AsyncSession, session), *args, **kwargs)
+                    result = await func(cast(AsyncSession, session), *args, **kwargs)

diff --git a/libs/infra/central_redis_client.py b/libs/infra/central_redis_client.py
--- a/libs/infra/central_redis_client.py
+++ b/libs/infra/central_redis_client.py
@@ -1,7 +1,7 @@
 import json
 import logging
 import os
-from typing import Any, Dict, Optional, cast
+from typing import Any, Dict, Optional, cast, Awaitable
 import uuid
 import datetime
 import redis.asyncio as redis_asyncio
@@
-        data_bytes = await cast(Redis, self.redis_raw).get(key)
+        data_bytes = await cast(Awaitable[Any], cast(Redis, self.redis_raw).get(key))
@@
-            await cast(Redis, self.redis_raw).set(key, json_bytes, ex=ex)
+            await cast(Awaitable[Any], cast(Redis, self.redis_raw).set(key, json_bytes, ex=ex))
@@
-        return await cast(Redis, self.redis).hget(name, key)
+        return await cast(Awaitable[Any], cast(Redis, self.redis).hget(name, key))
@@
-        await cast(Redis, self.redis).hset(name, key, value)
+        await cast(Awaitable[Any], cast(Redis, self.redis).hset(name, key, value))
@@
-        return await cast(Redis, self.redis).hgetall(name)
+        return await cast(Awaitable[Any], cast(Redis, self.redis).hgetall(name))
@@
-        return await cast(Redis, self.redis).hdel(name, *keys)
+        return await cast(Awaitable[Any], cast(Redis, self.redis).hdel(name, *keys))
@@
-            await cast(Redis, self.redis_raw).hset(name, mapping=encoded_mapping)
+            await cast(Awaitable[Any], cast(Redis, self.redis_raw).hset(name, mapping=encoded_mapping))
@@
-        return await cast(Redis, self.redis).get(key)
+        return await cast(Awaitable[Any], cast(Redis, self.redis).get(key))
@@
-        await cast(Redis, self.redis).set(key, value, ex=ex)
+        await cast(Awaitable[Any], cast(Redis, self.redis).set(key, value, ex=ex))
@@
-        return await cast(Redis, self.redis).delete(*keys)
+        return await cast(Awaitable[Any], cast(Redis, self.redis).delete(*keys))
@@
-        return await cast(Redis, self.redis).exists(*keys)
+        return await cast(Awaitable[Any], cast(Redis, self.redis).exists(*keys))
@@
-        await cast(Redis, self.redis).publish(channel, message)
+        await cast(Awaitable[Any], cast(Redis, self.redis).publish(channel, message))

diff --git a/libs/messaging/rabbitmq_message_bus.py b/libs/messaging/rabbitmq_message_bus.py
--- a/libs/messaging/rabbitmq_message_bus.py
+++ b/libs/messaging/rabbitmq_message_bus.py
@@ -8,7 +8,7 @@
 import time
 import uuid
-from typing import Any, Dict, Optional
+from typing import Any, Dict, Optional, cast
 from urllib.parse import urlparse
@@
-                self._conn = await aio_pika.connect_robust(self._dsn)
-                self._chan = await sel_
